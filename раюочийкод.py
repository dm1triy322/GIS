from flask import Flask, render_template, request, jsonify, send_from_directory
from pypdf import PdfReader
import os
import re  
import pyproj
import pymysql
import json
import hashlib
from pyproj import Transformer

app = Flask(__name__, static_folder="static", template_folder="templates")

PDF_FOLDER = r"C:\Users\user\Desktop\–ë–ó\TZ"
JSON_FILE = "shapes.json"  # üìå –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–≥—É—Ä


DB_CONFIG = {
    "host": "localhost",
    "user": "root",  # üî¥ –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –ª–æ–≥–∏–Ω
    "password": "Bds2121795!7559",  # üî¥ –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å
    "database": "shapes_db"
}

def get_db_connection():
    return pymysql.connect(**DB_CONFIG, cursorclass=pymysql.cursors.DictCursor)


def import_json_to_mysql():
    try:
        with open("shapes.json", "r", encoding="utf-8") as file:
            data = json.load(file)

        if not data.get("shapes"):
            print("‚ö† JSON-—Ñ–∞–π–ª –ø—É—Å—Ç–æ–π, –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º.")
            return

        connection = get_db_connection()
        cursor = connection.cursor()

        inserted_count = 0

        for shape in data["shapes"]:
            shape_type = shape["type"]
            coordinates = json.dumps(shape["coords"]) if "coords" in shape else json.dumps(shape)
            
            # üîπ –°–æ–∑–¥–∞–µ–º SHA256-—Ö—ç—à –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            coord_hash = hashlib.sha256(coordinates.encode()).hexdigest()

            # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –æ–±—ä–µ–∫—Ç –≤ –ë–î
            cursor.execute("SELECT COUNT(*) FROM shapes WHERE coord_hash = %s", (coord_hash,))
            exists = cursor.fetchone()["COUNT(*)"]

            if exists == 0:
                # üîπ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ–∏–≥—É—Ä—É –≤ MySQL
                cursor.execute("INSERT INTO shapes (shape_type, coordinates) VALUES (%s, %s)", (shape_type, coordinates))
                               
                inserted_count += 1

        connection.commit()
        cursor.close()
        connection.close()

        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ñ–∏–≥—É—Ä –≤ MySQL: {inserted_count}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ MySQL: {e}")

@app.route("/import_shapes", methods=["GET"])
def import_shapes():
    import_json_to_mysql()
    return jsonify({"message": "–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ MySQL!"})

import_json_to_mysql()  # ‚úÖ –ê–≤—Ç–æ-–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ MySQL –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏

def print_shapes_from_db():
    conn = get_db_connection()
    with conn.cursor() as cursor:
        cursor.execute("SELECT * FROM shapes")
        shapes = cursor.fetchall()
    
    conn.close()

    print("\nüìå –¢–∞–±–ª–∏—Ü–∞ MySQL: shapes (–í—Å–µ —Ñ–∏–≥—É—Ä—ã)\n" + "="*50)
    if not shapes:
        print("‚ö† –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è!")
        return

    for row in shapes:
        print(f"üÜî ID: {row['id']}")
        print(f"üìÇ –¢–∏–ø: {row['shape_type']}")
        print(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {row['coordinates']}")
        print(f"üïí –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {row['created_at']}")
        print("-" * 50)


# üìå –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
def print_coords_step(step, coords):
    print(f"\nüîÑ {step}:")
    for i, (x, y) in enumerate(coords):
        print(f"üìç {i + 1}: X={x}, Y={y}")

# üìå –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–ù–ï –º–µ–Ω—è–µ–º lat, lon!)
def convert_coords(coords, source_crs, target_crs):
    transformer = Transformer.from_proj(source_crs, target_crs, always_xy=True)
    converted_coords = []
    
    for x, y in coords:
        lat, lon = transformer.transform(y, x)  # ‚úÖ –í–µ—Ä–Ω—É–ª–∏ –∫–∞–∫ –±—ã–ª–æ!
        converted_coords.append([lon, lat])  # ‚úÖ –¢–æ—á–Ω–æ —Ä–∞–±–æ—á–∏–π –ø–æ—Ä—è–¥–æ–∫
    
    print_coords_step("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", converted_coords)  
    return converted_coords
	# üìå –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ 8 –∏ 9 —Å—Ç—Ä–∞–Ω–∏—Ü PDF
def extract_coords(fname):
    reader = PdfReader(fname)
    nazemny_coords = []

    total_pages = len(reader.pages)
    print(f"üìÑ PDF —Å–æ–¥–µ—Ä–∂–∏—Ç {total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü.")  

    target_pages = []
    if total_pages >= 8:
        target_pages.append(7)  
    if total_pages >= 9:
        target_pages.append(8)  

    if not target_pages:
        print("‚ùå –í PDF –Ω–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü 8 –∏ 9!")
        return []

    print("\nüìú –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ PDF...")
    
    for i in target_pages:
        page = reader.pages[i]
        pt = page.extract_text()
        if not pt:
            print(f"‚ö† –°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1} –ø—É—Å—Ç–∞!")
            continue

        for line in pt.split("\n"):
            numbers = re.findall(r"\d+\.\d+", line)  
            if len(numbers) >= 2:
                try:
                    raw_y = numbers[0]  
                    raw_x = numbers[1]  

                    x = float(raw_x[:9])  
                    y = raw_y[3:]  
                    if "." not in y:
                        y += ".00"  
                    y = float(y)  

                    x = f"{x:.2f}"
                    y = f"{y:.2f}"

                    print(f"üìç –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ç–æ—á–∫–∞: X={x}, Y={y}")  
                    nazemny_coords.append((x, y))
                except ValueError:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {numbers}")
                    continue

    print(f"‚úÖ –ò—Ç–æ–≥: –Ω–∞–π–¥–µ–Ω–æ {len(nazemny_coords)} —Ç–æ—á–µ–∫!")
    return nazemny_coords


# üìå –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ñ–∏–≥—É—Ä –∏–∑ JSON
def load_shapes_from_json():
    if not os.path.exists(JSON_FILE):
        print("‚ö† –§–∞–π–ª shapes.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return {"shapes": []}
    
    try:
        with open(JSON_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ñ–∏–≥—É—Ä—ã –∏–∑ {JSON_FILE}: {len(data.get('shapes', []))} —à—Ç.")
            return data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ JSON: {e}")
        return {"shapes": []}

# üìå –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–≥—É—Ä –∏–∑ JSON
@app.route("/load_shapes", methods=["GET"])
def load_shapes():
    try:
        with open(JSON_FILE, "r", encoding="utf-8") as file:
            data = json.load(file)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ñ–∏–≥—É—Ä—ã: {len(data.get('shapes', []))} —à—Ç.")
            return jsonify(data)
    except (FileNotFoundError, json.JSONDecodeError):
        print("‚ö† –§–∞–π–ª shapes.json –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤.")
        return jsonify({"shapes": []})



# üìå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä –≤ JSON (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—å)
@app.route("/save_shapes", methods=["POST"])
def save_shapes():
    try:
        data = request.get_json()
        shapes = data.get("shapes", [])

        with open(JSON_FILE, "w", encoding="utf-8") as file:
            json.dump({"shapes": shapes}, file, indent=4, ensure_ascii=False)

        print(f"‚úÖ –§–∏–≥—É—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ shapes.json: {len(shapes)} —à—Ç.")
        return jsonify({"message": "–§–∏–≥—É—Ä—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", "count": len(shapes)})
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–≥—É—Ä: {e}")
        return jsonify({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∏–≥—É—Ä"}), 500




# üìå API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ PDF
@app.route("/list_pdfs", methods=["GET"])
def list_pdfs():
    pdf_files = [f for f in os.listdir(PDF_FOLDER) if f.endswith(".pdf")]
    return jsonify({"pdfs": pdf_files})

# üìå API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF
@app.route("/load_pdf", methods=["POST"])
def load_pdf():
    filename = request.json.get("filename")
    pdf_path = os.path.join(PDF_FOLDER, filename)

    if not os.path.exists(pdf_path):
        return jsonify({"error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404

    extracted_coords = extract_coords(pdf_path)

    if not extracted_coords:
        print("‚ö† –ö–æ–Ω—Ç—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤!")
        return jsonify({"filename": filename, "contours": []})  

    source_crs = "+proj=tmerc +lat_0=0 +lon_0=38.48333333333 +k=1 " \
                 "+x_0=2250000 +y_0=-5712900.566 +ellps=krass " \
                 "+towgs84=-118.754,-61.782,-93.237,2.40896,3.47502,1.29688,6.5177 +units=m +no_defs"
    target_crs = "EPSG:4326"

    wgs84_coords = convert_coords(extracted_coords, source_crs, target_crs)

    response_data = {"filename": filename, "contours": [wgs84_coords]}
    print(f"\nüìå –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ñ—Ä–æ–Ω—Ç: {response_data}")

    return jsonify(response_data)

# üìå –†–∞–∑–¥–∞—á–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
@app.route("/")
def index():
    return render_template("index.html")

# üìå –†–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
@app.route("/static/<path:filename>")
def serve_static(filename):
    return send_from_directory(app.static_folder, filename)

if __name__ == "__main__":
    app.run(debug=True)

print_shapes_from_db() 